<?php

/**
 * @file
 * Defines the Product entity and associated features.
 */

use Drupal\commerce\BundleFieldDefinition;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_config_translation_info_alter().
 */
function commerce_product_config_translation_info_alter(&$info) {
  $info['commerce_product_attribute']['class'] = '\Drupal\commerce_product\ConfigTranslation\ProductAttributeMapper';
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function commerce_product_entity_form_display_update(EntityFormDisplayInterface $form_display) {
  // Reset the cached attribute field map when the 'default' product variation
  // form mode is updated, since the map ordering is based on it.
  if ($form_display->getTargetEntityTypeId() == 'commerce_product_variation' && $form_display->getMode() == 'default') {
    $attribute_field_manager = \Drupal::service('commerce_product.attribute_field_manager');
    $attribute_field_manager->clearCaches();
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function commerce_product_entity_view_display_update(EntityInterface $entity) {
  // The product view uses the variation view and needs to be cleared, which doesn't happen automatically
  // because we're editing the variation, not the product
  if (substr($entity->getConfigTarget(), 0, 27) === 'commerce_product_variation.') {
    Cache::invalidateTags(['commerce_product_view']);
  }
}

/**
 * Implements hook_entity_access().
 */
function commerce_product_entity_access(EntityInterface $entity, $operation, $account) {
  // Allow published products to be viewed by all users for now.
  // @todo Remove once we implement the full product permissions.
  if ($operation == 'view') {
    if ($entity->getEntityTypeId() == 'commerce_product' && $entity->isPublished()) {
      return AccessResult::allowed();
    }
    elseif ($entity->getEntityTypeId() == 'commerce_product_variation' && $entity->isActive()) {
      return AccessResult::allowed();
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_theme().
 */
function commerce_product_theme() {
  return [
    'commerce_product_form' => [
      'render element' => 'form',
    ],
    'commerce_product' => [
      'render element' => 'elements',
    ],
    'commerce_product_variation' => [
      'render element' => 'elements',
    ],
    'commerce_product_attribute_value' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_commerce_product().
 */
function commerce_product_theme_suggestions_commerce_product(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_product', $variables);
}

/**
 * Implements hook_theme_suggestions_commerce_product_variation().
 */
function commerce_product_theme_suggestions_commerce_product_variation(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_product_variation', $variables);
}

/**
 * Implements hook_theme_suggestions_commerce_product_commerce_product_attribute_value().
 */
function commerce_product_theme_suggestions_commerce_product_attribute_value(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_product_attribute_value', $variables);
}

/**
 * Prepares variables for product templates.
 *
 * Default template: commerce-product.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_product(array &$variables) {
  /** @var Drupal\commerce_product\Entity\ProductInterface $product */
  $product = $variables['elements']['#commerce_product'];

  $variables['product_entity'] = $product;
  $variables['product_url'] = $product->toUrl();
  $variables['product'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['product'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for product variation templates.
 *
 * Default template: commerce-product-variation.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_product_variation(array &$variables) {
  /** @var Drupal\commerce_product\Entity\ProductVariationInterface $product_variation */
  $product_variation = $variables['elements']['#commerce_product_variation'];
  $product = $product_variation->getProduct();

  $variables['product_variation_entity'] = $product_variation;
  $variables['product_url'] = $product->toUrl();
  $variables['product_variation'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['product_variation'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for product attribute value templates.
 *
 * Default template: commerce-product-attribute-value.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_product_attribute_value(array &$variables) {
  /** @var Drupal\commerce_product\Entity\ProductAttributeValueInterface $product */
  $attribute_value = $variables['elements']['#commerce_product_attribute_value'];

  $variables['product_attribute_value_entity'] = $attribute_value;
  $variables['product_attribute_value'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['product_attribute_value'][$key] = $variables['elements'][$key];
  }
}

/**
 * Adds the default stores field to a product.
 *
 * A product can belong to multiple stores.
 * Store id can't be a base field because the Views integration is broken.
 * Instead, it is created as a configurable field for each order type.
 *
 * @param \Drupal\commerce_product\Entity\ProductTypeInterface $product_type
 *   The product type.
 */
function commerce_product_add_stores_field($product_type) {
  $field_definition = BundleFieldDefinition::create('entity_reference')
    ->setTargetEntityTypeId('commerce_product')
    ->setTargetBundle($product_type->id())
    ->setName('stores')
    ->setLabel('Stores')
    ->setCardinality(BundleFieldDefinition::CARDINALITY_UNLIMITED)
    ->setRequired(TRUE)
    ->setSetting('target_type', 'commerce_store')
    ->setSetting('handler', 'default')
    ->setDisplayOptions('form', [
      'type' => 'commerce_entity_select',
      'weight' => -10,
    ]);

  $configurable_field_manager = \Drupal::service('commerce.configurable_field_manager');
  $configurable_field_manager->createField($field_definition);
}

/**
 * Adds the default body field to a product type.
 *
 * @param \Drupal\commerce_product\Entity\ProductTypeInterface $product_type
 *   The product type.
 * @param string $label
 *   (optional) The label for the body instance. Defaults to 'Body'.
 */
function commerce_product_add_body_field($product_type, $label = 'Body') {
  $field_definition = BundleFieldDefinition::create('text_with_summary')
    ->setTargetEntityTypeId('commerce_product')
    ->setTargetBundle($product_type->id())
    ->setName('body')
    ->setLabel($label)
    ->setSetting('display_summary', FALSE)
    ->setDisplayOptions('form', [
      'type' => 'text_textarea_with_summary',
      'weight' => 1,
    ])
    ->setDisplayOptions('view', [
      'label' => 'hidden',
      'type' => 'text_default',
    ]);

  $configurable_field_manager = \Drupal::service('commerce.configurable_field_manager');
  $configurable_field_manager->createField($field_definition, FALSE);
}

/**
 * Adds the default variations field to a product type.
 *
 * Variations can't be a base field because the Views integration is broken.
 * Instead, it is created as a configurable field for each product type.
 *
 * @param \Drupal\commerce_product\Entity\ProductTypeInterface $product_type
 *   The product type.
 */
function commerce_product_add_variations_field($product_type) {
  $field_definition = BundleFieldDefinition::create('entity_reference')
    ->setTargetEntityTypeId('commerce_product')
    ->setTargetBundle($product_type->id())
    ->setName('variations')
    ->setLabel('Variations')
    ->setCardinality(BundleFieldDefinition::CARDINALITY_UNLIMITED)
    ->setRequired(TRUE)
    ->setSetting('target_type', 'commerce_product_variation')
    ->setSetting('handler', 'default')
    ->setSetting('handler_settings', [
      'target_bundles' => [
        $product_type->getVariationTypeId(),
      ],
    ])
    ->setDisplayOptions('form', [
      'type' => 'inline_entity_form_complex',
      'weight' => 10,
      'settings' => [
        'override_labels' => TRUE,
        'label_singular' => 'variation',
        'label_plural' => 'variations',
      ],
    ])
    ->setDisplayOptions('view', [
      'type' => 'commerce_add_to_cart',
      'weight' => 10,
    ]);

  $configurable_field_manager = \Drupal::service('commerce.configurable_field_manager');
  $configurable_field_manager->createField($field_definition);
}

/**
 * Implements hook_field_widget_form_alter().
 */
function commerce_product_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  $field_name = $field_definition->getName();
  $entity_type = $field_definition->getTargetEntityTypeId();
  $widget_name = $context['widget']->getPluginId();
  $required = $field_definition->isRequired();
  switch (TRUE) {
    case ($field_name == 'variations' && $entity_type == 'commerce_product'):
      /** @var \Drupal\commerce_product\ProductVariationBulkCreator $creator */
      $creator = \Drupal::service('commerce_product.variation_bulk_creator');
      $one = $context['widget']->getSettings()['label_singular'];
      $many = $context['widget']->getSettings()['label_plural'];
      $add = isset($element['actions']['ief_add']);
      $add_existing = isset($element['actions']['ief_add_existing']);
      $autocomplete = isset($element['form']['entity_id']);
      $ief = isset($element['form']['inline_entity_form']);
      $id = isset($element['#ief_id']) ? $element['#ief_id'] : FALSE;
      if ($new = !isset($element['entities']['0'])) {
        // There is no variations yet, so we extract combinations by sample one.
        /** @var \Drupal\commerce_product\Entity\Product $product */
        $product = $form_state->getFormObject()->getEntity();
        /** @var \Drupal\commerce_product\Entity\ProductVariation $variation */
        $variation = $creator->createSampleProductVariation($product);
        $all = $creator->getAllAttributesCombinations([$variation]);
        $count = $all ? $all['possible']['count'] : 0;
        if ($count > 1 && ($add || $add_existing || $autocomplete || $ief)) {
          $i = 0;
          // The disabled button is shown to reveal the bulk creator service
          // availability and the number of variations to create.
          $parents = ['form', 'inline_entity_form', 'actions', 'ief_add_all'];
          $element['alter_data_' . $i] = [
            '#parents' => $add_existing ? ['actions'] : ($autocomplete ? ['form', 'actions'] : $parents),
            '#type' => 'submit',
            '#value' => t('Create @count @variations', ['@count'=> $count, '@variations' => $count > 1 ? $many : $one]),
            '#weight' => 10,
            '#disabled' => TRUE,
            '#attributes'=> [
              'title' => t('To enable this functionality you need to create at least one @variation', ['@variation'=> $one]),
              ],
          ];
          if ($ief) {
            $i++;
            // No combination is used yet, so we take the first one.
            foreach ($all['combinations'][0] as $field_name => $value) {
              // Do respect the default value defined on the attribute field.
              if (empty($variation->getFieldDefinition($field_name)->getDefaultValueLiteral())) {
                $element['alter_data_' . $i] = [
                  '#parents' => ['form', 'inline_entity_form', $field_name, 'widget'],
                  '#value' => $value  == '_none' ? [] : ['target_id' => $value],
                ];
                $i++;
              }
            }
          }
          $element['#after_build'][] = [get_class($creator), 'afterBuildPreRenderArrayAlter'];
        }
      }
      elseif (!$id || !$all = $creator->getIefFormAllAttributesCombinations($form_state, $id)) {
        return;
      }

      if ($all['duplications_list']) {
        $count_duplicated = count($all['duplicated']);
        $placeholders = [
          '@variations' => $count_duplicated > 1 ? $many : $one,
          '@count' => $count_duplicated,
          '@labels' => $all['duplications_list'],
        ];
        $warning = t('You have @count @variations duplicated: @labels', $placeholders);
        drupal_set_message($warning, 'warning');
      }
      foreach ($all['possible']['combinations'] as $combination) {
        if (!in_array($combination, $all['combinations'])) {
          $form_state->setValue('next_attribute_value_ids', $combination);
          /** @var \Drupal\commerce_product\Entity\ProductVariation $all['last_variation'] */
          !$new && $form_state->setValue('last_added_price', $all['last_variation']->getPrice());
          if (!$new && ($add || $add_existing)) {
            $count = $all['possible']['count'] - count($all['used']);
            $element['actions']['ief_add_all'] = [
              '#submit' => [[$creator, 'createAllIefFormVariations']],
              '#value' => t('Create @count @variations', ['@count'=> $count, '@variations' => $count > 1 ? $many : $one]),
              '#weight' => 10,
              '#attributes'=> [
                'title' => t('Automatically create all the rest @variations based on price and attributes combination of the last added @variation. Other specific values such as @variation image or SKU may be edited inline later. Helpful for not missing any @variation.',
                  ['@variation'=> $one, '@variations'=> $many])
                ],
            ] + $element['actions']['ief_add' . ($add ? '' : '_existing')];
          }
          break;
        }
      }
    break;
    case ($field_name == 'path' && $entity_type == 'commerce_product' && $widget_name == 'path'):
      $element['alias']['#description'] = t('The alternative URL for this product. Use a relative path. For example, "/my-product".');
    break;
    case ($field_name == 'title' && $entity_type == 'commerce_product_variation' && !$required):
      // The title field is optional only when its value is automatically
      // generated, in which case the widget needs to be hidden.
      $element['#access'] = FALSE;
    break;
    case ($field_name == 'price' && empty($element['#default_value']) && ($price = $form_state->getValue('last_added_price'))):
      $element['#default_value'] = $price->toArray();
    break;
    case (($ids = $form_state->getValue('next_attribute_value_ids')) && isset($ids[$field_name]) && empty($element['#default_value'])):
      $element['#default_value'] = $ids[$field_name];
    break;
    case ($field_name == 'sku'):
      global $base_url;
      $setup_link = t('<a href=":href" target="_blank">Set up default SKU.</a>', [':href' => $base_url . '/admin/commerce/config/product-variation-types/' . $context['form']['#bundle'] . '/edit/form-display']);
      $element['value']['#description'] = implode(' ', [$element['value']['#description'], $setup_link]);
    break;
  }
}
