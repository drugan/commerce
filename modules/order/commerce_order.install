<?php

/**
 * @file
 * Install, update and uninstall functions for the Order module.
 */

use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Add the 'data' field to 'commerce_order_item' entities.
 */
function commerce_order_update_8201() {
  $storage_definition = BaseFieldDefinition::create('map')
    ->setLabel(t('Data'))
    ->setDescription(t('A serialized array of additional data.'));

  $update_manager = \Drupal::entityDefinitionUpdateManager();
  $update_manager->installFieldStorageDefinition('data', 'commerce_order_item', 'commerce_order', $storage_definition);
}

/**
+ * Update order item quantity field storage definition.
+ *
+ * @see https://www.drupal.org/node/2794909
+ */
function commerce_order_update_8300() {
  $config = \Drupal::configFactory();
  $key_value = \Drupal::keyValue('entity.definitions.installed');
  $database = \Drupal::database();
  $db_schema = $database->schema();
  $all = $updated = [];

  foreach ($config->listAll('core.entity_form_display.commerce_order_item.') as $id) {
    $editable = $config->getEditable($id);
    $data = $editable->getRawData();

    if (isset($data['targetEntityType'])) {
      $entity_type = $data['targetEntityType'];
      $field_name = 'quantity';
      $definitions = $key_value->get("{$entity_type}.field_storage_definitions");
      if (!isset($definitions[$field_name])) {
        continue;
      }
      $changes = $definitions[$field_name]->getSchema()['columns']['value'];
      $needs_change = $changes['precision'] != 14 && $changes['scale'] != 4;
      $changes['precision'] = 14;
      $changes['scale'] = 4;

      $tables = ["{$entity_type}_revision", $entity_type];

      foreach ($tables as $table) {
        if ($needs_change && $db_schema->tableExists($table) && !isset($updated[$table])) {
          $updated[$table] = FALSE;

          // The table data to restore after the update is completed.
          $all[$table] = $database->select($table, 'n')
            ->fields('n')
            ->execute()
            ->fetchAll();

          // Truncate the field table to unlock it for changes.
          $database
            ->truncate($table)
            ->execute();

          $db_schema->changeField($table, $field_name, $field_name, $changes);

          $updated[$table] = TRUE;
        }
      }

      if (isset($data['content'][$field_name]) && $data['content'][$field_name]['type'] !== 'commerce_number') {
        $data['content'][$field_name]['type'] = 'commerce_number';
        $data['content'][$field_name]['settings'] += [
          'min' => '1',
          'max' => "",
          'default_value' => '1',
          'step' =>  '1',
          'prefix' => '',
          'suffix' => '',
        ];
        $editable->setData($data);
        $editable->save();
      }
    }
  }

  // Restore earlier saved number fields data.
  foreach ($all as $table => $rows) {
    $updated[$table] = FALSE;
    foreach ($rows as $row) {
      $database->insert($table)
        ->fields((array) $row)
        ->execute();
    }
    $updated[$table] = TRUE;
  }

  if (!empty($updated) && !in_array(FALSE, $updated)) {
    return t('The order item quantity field definition has been successfully updated.');
  }
  else {
    return t("The attempt to update order item quantity field is failed. To update the field manually go to commerce_order_item table in the site's DB and edit quantity field structure changing its Length to 14,4. Then flush caches and set Commerce number field widget for each of the order item type's enabled form display modes.");
  }
}

/**
 * Add the 'overridden_unit_price' field to 'commerce_order_item' entities.
 */
function commerce_order_update_8202() {
  $storage_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Overridden unit price'))
    ->setDescription(t('Whether the unit price is overridden.'))
    ->setDefaultValue(FALSE);

  $update_manager = \Drupal::entityDefinitionUpdateManager();
  $update_manager->installFieldStorageDefinition('overridden_unit_price', 'commerce_order_item', 'commerce_order', $storage_definition);
}

/**
 * Add the 'locked' field to 'commerce_order' entities.
 */
function commerce_order_update_8203() {
  $storage_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Locked'))
    ->setSettings([
      'on_label' => t('Yes'),
      'off_label' => t('No'),
    ])
    ->setDefaultValue(FALSE);

  $update_manager = \Drupal::entityDefinitionUpdateManager();
  $update_manager->installFieldStorageDefinition('locked', 'commerce_order', 'commerce_order', $storage_definition);
}
